Texture2D _textures[32];

SamplerState SampleType;

cbuffer LightBuffer
{
	// allows different intensities of different colors (bright white: 1.0f, 1.0f, 1.0f, a more natural
	// evening/dusk: 0.6f, 0.6f, 0.6f. ambientLight is the light applied to all pixels regardless
	// of their position or orientation.
	float4 ambientColor;

	// The color the light projects. If a pixel is lit, the intensity of the light striking it will
	// be multiplied by this color (warm yellow could look like house lights mostly white should
	// look like the sun.)
	float4 diffuseColor;

	// The normalized direction vector3 that describes the direction of the light as if the light
	// was a (for all intents and purposes) infinite distance away (i.e. the sun).
	float3 lightDirection;

	// padding so we don't take performance hits when writing to this buffer
	float padding;
};

cbuffer splatInfo
{
	int _numTextures;
	int _numSplatMaps;
}

struct PixelInputType
{
	float4 position : SV_POSITION;
	float2 tex : TEXCOORD0;
	float3 normal : NORMAL;
};

float4 GetTextureColor(float2 splat_uv, float2 texture_uv);

float4 TerrainPixelShader(PixelInputType input) : SV_TARGET
{
	float2 normalized_tex = input.tex / 4.0f;
	float4 textureColor = GetTextureColor(normalized_tex, input.tex);
	float3 lightDir;
	float lightIntensity;
	float4 color = ambientColor;

    // Invert the light direction for calculations.
    lightDir = -lightDirection;

	// Calculate the amount of light on this pixel.
    lightIntensity = saturate(dot(input.normal, lightDir));
	
    // Determine the final diffuse color based on the diffuse color and the amount of light intensity.
    color += (diffuseColor * lightIntensity);

	// Saturate the final light color.
    color = saturate(color);

	// Multiply the texture color and the final light color to get the result.
    color = color * textureColor;

 	return color;
}

float4 GetTextureColor(float2 splat_uv, float2 texture_uv)
{
	float4 color = float4(0.0f, 0.0f, 0.0f, 0.0f);

	// Our texture array must look like this:
	// [0] splat_map_0 - first splat map
	// [1] texture_0 - Special Base Texture, all colors start here
	// [2] texture_1 - Detail Texture 2, maps to red
	// [3] texture_2 - Detail Texture 3, maps to green
	// [4] texture_3 - Detail Texture 4, maps to blue
	// [5] texture_4 - Detail Texture 5, maps to alpha (1 - alpha)
	// [6] splat_map_1 - second splat map
	// [7] texture_5 - Detail Texture 6, maps to red
	// etc

	color = _textures[1].Sample(SampleType, texture_uv);

	// _numSplatMaps is how many blocks of color lerping we need to do
	for (int i = 1; i <= _numSplatMaps; i += 5)
	{
		float4 splat = _textures[i - 1].Sample(SampleType, splat_uv);

		color = lerp(color, _textures[i + 1].Sample(SampleType, texture_uv), splat.r);
		color = lerp(color, _textures[i + 2].Sample(SampleType, texture_uv), splat.g);
		color = lerp(color, _textures[i + 3].Sample(SampleType, texture_uv), splat.b);
		color = lerp(color, _textures[i + 4].Sample(SampleType, texture_uv), 1 - splat.a);
	}
	
	return color;
}